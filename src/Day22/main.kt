package Day22

import PROFILE_REPEAT
import readInput
import kotlin.time.measureTime

internal const val SEQUENCE_LENGTH = 4

val Long.onesDigit: Int get() = (this % 10).toInt()

fun main() {
  measureTime {
        repeat(PROFILE_REPEAT) {
          val input = readInput("Day22")

          val secrets = input.lines().map { it.trim().toInt() }

          val solutionOne = calculateSumOfSecrets(secrets, 2000)

          println(
              "What is the sum of the 2000th secret number generated by each buyer? $solutionOne")

          val secretGeneratorList =
              input.lines().map { it.trim().toInt() }.map { SecretGenerator(it) }
          val solutionTwo = findHighestScoringSequence(secretGeneratorList, 2001).maxOf { it.value }
          println("What is the most bananas you can get? $solutionTwo")
        }
      }
      .let { println("\nAverage time taken: ${it / PROFILE_REPEAT}") }
}

fun calculateSumOfSecrets(secrets: List<Int>, count: Int): Long =
    secrets.sumOf { SecretGenerator(it).evolve(2000) }

fun findHighestScoringSequence(
    secretGeneratorList: List<SecretGenerator>,
    limit: Int = 2000
): Map<PriceChangeList, SequenceScore> {
  val sequenceScores = mutableMapOf<PriceChangeList, SequenceScore>()

  secretGeneratorList.forEach {
    it.getSequenceScoreList(limit).entries.forEach { (priceChangeList, score) ->
      sequenceScores[priceChangeList] = sequenceScores.getOrDefault(priceChangeList, 0) + score
    }
  }

  return sequenceScores
}
